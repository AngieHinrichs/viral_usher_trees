name: viral_usher monthly tree update driven by rank_refseqs/refseq_tree_metadata.tsv

on:
  schedule:
    # Runs first day of every month at 2:00 AM UTC
    - cron: '0 2 1 * *'
  workflow_dispatch: # Allow manual triggering

jobs:

  # Partition trees for concurrent jobs
  partition_trees:
    runs-on: ubuntu-latest
    outputs:
      start_timestamp: ${{ steps.timestamp.outputs.start_timestamp }}
      build_version: ${{ steps.timestamp.outputs.build_version }}
      viral_usher_version: ${{ steps.timestamp.outputs.viral_usher_version }}
    permissions:
      contents: write
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install viral_usher
      # This is needed in case there are any missing config files that must be generated
      run: |
        pip install --upgrade pip
        pip install viral_usher
    
    - name: Partition trees
      # The number of jobs here (-j) must correspond to the job_index values below
      run: scripts/partition_jobs.py -i rank_refseqs/refseq_tree_metadata.tsv -j 10

    - name: Upload job lists
      uses: actions/upload-artifact@v4
      with:
        name: job_lists
        path: |
          config_failures.txt
          job_list.*.txt
        retention-days: 15
    
    - name: Capture timestamp and version info
      id: timestamp
      run: |
        echo "start_timestamp=$(date +'%Y-%m-%d_%H-%M-%S')" >> $GITHUB_OUTPUT
        echo "build_version=$(date +'%Y.%m.%d')" >> $GITHUB_OUTPUT
        echo "viral_usher_version=$(pip show viral_usher | grep Version | cut -d' ' -f2)" >> $GITHUB_OUTPUT

    - name: Commit any newly created config files
      run: |
        # Configure git
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"

        # Add all updated tree files
        git add trees/
        
        # Check if there are changes to commit
        if git diff --staged --quiet; then
          echo "No changes to commit"
        else
          git commit -m "Config files for new trees added ${{ steps.timestamp.outputs.build_version }}"
        fi
        git push

          
  # Run concurrent jobs, each one driven by a config file from partition_trees
  build_trees:
    runs-on: ubuntu-latest
    needs: partition_trees
    strategy:
      matrix:
        # The job indexes must match the range of the -j option in the partition_jobs.py command above
        job_index: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
      # Don't let more than 5 jobs run simultaneously so we don't exceed NCBI's rate limit
      max-parallel: 5
      # Don't stop this job if some other job has a problem, build as many trees as we can.
      fail-fast: false
    permissions:
      contents: write
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install viral_usher
      run: |
        pip install --upgrade pip
        pip install viral_usher

    - name: Download job lists
      uses: actions/download-artifact@v4
      with:
        name: job_lists
        path: ./

    - name: Free Disk Space
      uses: jlumbroso/free-disk-space@main
      with:
        tool-cache: false
        android: true
        dotnet: true
        haskell: true
        large-packages: true
        swap-storage: true

    - name: Build
      run: |
        # actions/checkout@v4 doesn't pick up partition_trees' commit, so git pull before running
        git pull
        bash scripts/build_job.sh ${{ matrix.job_index }}


    - name: Upload logs and summaries
      uses: actions/upload-artifact@v4
      with:
        name: job-${{ matrix.job_index }}-logs
        path: |
          logs/
          built_trees.${{ matrix.job_index }}.txt
          failed_trees.${{ matrix.job_index }}.txt
        retention-days: 31

    - name: Upload just the tiny summary files for summarize job
      uses: actions/upload-artifact@v4
      with:
        name: job-${{ matrix.job_index }}-tree-lists
        path: |
          built_trees.${{ matrix.job_index }}.txt
          failed_trees.${{ matrix.job_index }}.txt
        retention-days: 7

    - name: Commit
      run: |
        # Configure git
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"

        # git pull to get other concurrent jobs' commits before adding
        git pull

        # Add all updated tree files
        git add trees/*/{metadata.tsv.gz,optimized.pb.gz,output_stats.tsv,tree.jsonl.gz,viz.nwk.gz,viz.pb.gz}
        
        # Check if there are changes to commit
        if git diff --staged --quiet; then
          echo "No changes to commit"
        else
          end_timestamp=$(date +'%Y-%m-%d_%H-%M-%S')
          commit_message=$(cat <<EOF
        Automated update: ${{ needs.partition_trees.outputs.build_version }} batch ${{ matrix.job_index }}
        
        Build started at:    ${{ needs.partition_trees.outputs.start_timestamp }}
        Batch completed at:  $end_timestamp
        viral_usher version: ${{ needs.partition_trees.outputs.viral_usher_version }}
        EOF
        )
          
          # Retry loop for the git operations that might fail due to conflicts between jobs
          max_attempts=5
          attempt=1
          while [ $attempt -le $max_attempts ]; do
            if git pull && git commit -m "$commit_message" && git push; then
              echo "Successfully pushed on attempt $attempt"
              break
            elif [ $attempt -eq $max_attempts ]; then
              echo "Failed to push after $max_attempts attempts"
              exit 1
            else
              echo "Push failed, retrying in $((2 ** attempt)) seconds..."
              sleep $(( (2 ** attempt) + ( RANDOM % 10 ) ))
              # Undo commit to retry
              git reset --soft HEAD~1
              attempt=$((attempt + 1))
            fi
          done
        fi


  summarize:
    runs-on: ubuntu-latest
    needs: [partition_trees, build_trees]
    permissions:
      contents: write
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Download lists of built and failed trees
      uses: actions/download-artifact@v4
      with:
        pattern: "job-*-tree-lists"
        path: "./"
        merge-multiple: true

    - name: Concat lists of build and failed trees
      id: concat
      run: |
        sort built_trees.*.txt > built_trees.txt
        sort failed_trees.*.txt > failed_trees.txt
        echo "built_count=$(wc -l < built_trees.txt)" >> $GITHUB_OUTPUT
        echo "failed_count=$(wc -l < failed_trees.txt)" >> $GITHUB_OUTPUT

    - name: Make summary metadata for interactive tree selection
      run: |
        # git pull because jobs start up too quickly to get the previous job's commit
        git pull
        scripts/summarize_trees.py -i rank_refseqs/refseq_tree_metadata.tsv -o tree_metadata.tsv

    - name: Commit tree_metadata.tsv with summary message
      run: |
        # Configure git
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"

        # Add all updated files
        git add tree_metadata.tsv built_trees.txt failed_trees.txt

        # Describe failures only if there were failures
        if (( ${{ steps.concat.outputs.failed_count }} > 0 )); then
          fail_message="${{ steps.concat.outputs.failed_count }} trees encountered an error and were not updated. Logs are in GitHub Actions."
        else
          fail_message=""
        fi
        
        # Check if there are changes to commit
        if git diff --staged --quiet; then
          echo "No changes to commit"
        else
          git commit -m "Automated update: ${{ needs.partition_trees.outputs.build_version }} metadata (${{ steps.concat.outputs.built_count }} trees updated)
          $fail_message"
          git push
        fi
